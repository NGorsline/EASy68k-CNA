00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/20/2018 3:54:42 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler I/O 
00000000                             3  * Written by :  touCANs
00000000                             4  * Date       :  5/1/18 - 
00000000                             5  * Description:  I/O functionality for the disassembler 
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000  287C 00008000             11      MOVEA.L #DISM_CODE,A4
00001006                            12      
00001006  43F9 000011BE             13      LEA     ADDR_PRMPT_STRT,A1
0000100C  103C 000E                 14      MOVE.B  #14,D0
00001010  4E4F                      15      TRAP    #15
00001012                            16  
00001012  43F9 00001230             17      LEA     buffer,A1       * Load buffer's effective address into A1
00001018  103C 0002                 18      MOVE.B  #2,D0           * get the starting address from the user as a string
0000101C                            19      
0000101C  4E4F                      20      TRAP    #15         
0000101E                            21      
0000101E                            22  *** Need to first check if D1 is a valid size of minimum 4 (user entered at least 4 hexa bits)
0000101E  B27C 0004                 23      CMP     #4,D1           * minimum of a word for the address
00001022  6D00 008E                 24      BLT     ERROR_INV_INP   * invalid start address  
00001026                            25      
00001026  4EB9 0000105E             26      JSR     CONVERSION_LOOP * convert the starting address
0000102C                            27      
0000102C                            28  *** FULL STARTING ADDRESS HAS BEEN CONVERTED, STORE IN A6 AND GET ENDING ADDRESSS
0000102C  2C42                      29      MOVEA.L D2,A6           * move converted addr to A6 (A6 acts as iterator while disassembling)
0000102E  4282                      30      CLR.L   D2              * clear register D2 in preparation to hold the converted end address
00001030  4284                      31      CLR.L   D4              * clear register D4 to start the counter at 0 again
00001032                            32      
00001032  43F9 000011E1             33      LEA     ADDR_PRMPT_END,A1
00001038  103C 000E                 34      MOVE.B  #14,D0
0000103C  4E4F                      35      TRAP    #15
0000103E                            36      
0000103E  103C 0002                 37      MOVE.B  #2,D0           * get the ending address from the user as a string
00001042  4E4F                      38      TRAP    #15
00001044                            39      
00001044                            40  *** Need to first check if D1 is a valid size of minimum 4 (user entered at least 4 hexa bits)
00001044  B27C 0004                 41      CMP     #4,D1           * minimum of a word for the address
00001048  6D00 0068                 42      BLT     ERROR_INV_INP   * invalid end address
0000104C                            43      
0000104C  4EB9 0000105E             44      JSR     CONVERSION_LOOP * convert the ending address
00001052  2A42                      45      MOVEA.L D2,A5           * move converted addr to A5 (compare A6 to A5 to know when to stop)
00001054  BDCD                      46      CMPA.L  A5,A6           * check if beginning address is >= end address. If so, display error
00001056  6C00 006A                 47      BGE     ERROR_END_LTE_BEG
0000105A  6000 0076                 48      BRA     MAIN_LOOP       * skip past the CONVERSION_LOOP subroutine to continue with the program
0000105E                            49      
0000105E                            50  
0000105E                            51  
0000105E                            52  *    ADDI.B  #1,D4           * offset our counter to start at 1
0000105E                            53  
0000105E                            54  
0000105E                            55  ;; ~~~~~~~~BEGINNING OF CONVERSION SUBROUTINE~~~~~~~~
0000105E                            56  CONVERSION_LOOP       
0000105E  1619                      57      MOVE.B  (A1)+,D3        * store the next thingy B
00001060                            58  *** Need to check for proper hex conversion 
00001060                            59  
00001060                            60  CHECK_NUM_MIN     ;; Checks if number is >= 30 (0) in ASCII
00001060  B67C 0030                 61      CMP     #ASC_NUM_MIN,D3 * Range of ASCII numbers: (2F >= 3A)[2F,3A] then subtract 30    
00001064  6C00 0006                 62      BGE     CHECK_NUM_MAX   * check if it's in range for x > 2F
00001068  6000 0048                 63      BRA     ERROR_INV_INP   * First condition not met, go to bad input error 
0000106C                            64      
0000106C                            65  CHECK_NUM_MAX     ;; Checks if number is <= 39 (9) in ASCII
0000106C  B67C 0039                 66      CMP     #ASC_NUM_MAX,D3
00001070  6F00 0020                 67      BLE     ASC_TO_NUM      * If condition for the range was met, do the math
00001074  4EF9 0000107A             68      JMP     CHECK_CHAR_MIN  * Second condition was not met, check if a character
0000107A                            69      
0000107A                            70  CHECK_CHAR_MIN    ;; Checks if number is >= 41 (A) in ASCII
0000107A  B67C 0041                 71      CMP     #ASC_CHAR_MIN,D3
0000107E  6C00 0006                 72      BGE     CHECK_CHAR_MAX  
00001082  6000 002E                 73      BRA     ERROR_INV_INP   * First condition not met, D3 < 41 = symbols. Go to bad input error
00001086                            74      
00001086                            75  CHECK_CHAR_MAX    ;; Checks if number is <= 46 (F) in ASCII
00001086  B67C 0046                 76      CMP     #ASC_CHAR_MAX,D3
0000108A  6F00 0010                 77      BLE     ASC_TO_CHAR     * Condition was met for A-F     
0000108E  6000 0022                 78      BRA     ERROR_INV_INP   * Greater than 46 = out of 16-bit system
00001092                            79      
00001092                            80  ASC_TO_NUM        ;; Converts a string digit into a hex value
00001092  0403 0030                 81      SUBI.B  #$30,D3
00001096  4EF9 000010A6             82      JMP     SHIFTS          * After this routine is finished, complete shifts/adds
0000109C                            83      
0000109C                            84  ASC_TO_CHAR       ;; Converts a string character into a hex value
0000109C  0403 0037                 85      SUBI.B  #$37,D3    
000010A0  4EF9 000010A6             86      JMP     SHIFTS          * Convert a string character into a hex value
000010A6                            87      
000010A6                            88  SHIFTS            ;; Shifts D2 left by four bits to make room for the newly converted hexabit
000010A6  E98A                      89      LSL.L   #4,D2           * Initial value in D2 shifted hexabit over to the left to make room   
000010A8  D403                      90      ADD.B   D3,D2           * Add modified value from D3 into D2.
000010AA                            91      
000010AA  5204                      92      ADD.B   #1,D4           * Increment counter by 1 
000010AC  B244                      93      CMP     D4,D1           * Check if we have already reached the end of the input. D4 = counter
000010AE  66AE                      94      BNE     CONVERSION_LOOP * Continue back to the loop if D4 != D1  
000010B0  4E75                      95      RTS
000010B2                            96  ;; ~~~~~~~~END OF CONVERSION SUBROUTINE~~~~~~~~
000010B2                            97      
000010B2                            98      
000010B2                            99      
000010B2                           100  ERROR_INV_INP ;; Prints the INVALID_INPUT error message to the console
000010B2  43F9 0000115E            101      LEA     INVALID_INPUT,A1
000010B8  103C 000D                102      MOVE.B  #13,D0
000010BC  4E4F                     103      TRAP    #15
000010BE  6000 0176                104      BRA     END_NOW
000010C2                           105      
000010C2                           106  ERROR_END_LTE_BEG ;; Prints the END_LTE_BEG (end <= to beginning) error message to the console.
000010C2  43F9 0000117B            107      LEA     END_LTE_BEG,A1
000010C8  103C 000D                108      MOVE.B  #13,D0
000010CC  4E4F                     109      TRAP    #15
000010CE  6000 0166                110      BRA     END_NOW
000010D2                           111    
000010D2                           112    
000010D2                           113  MAIN_LOOP
000010D2                           114      *BRA     END_NOW
000010D2  BDCD                     115      CMPA.L  A5,A6
000010D4  6C00 0160                116      BGE     END_NOW * End program
000010D8                           117      *MOVE.W  A6,D0   * Copy A6 location to restore after jump to SR
000010D8  4EB9 00001244            118      JSR     OP_DECODE
000010DE                           119      
000010DE                           120  PRINT_LOOP ;; Print the most recently decoded line
000010DE  103C 000D                121      MOVE.B  #13,D0
000010E2  4E4F                     122      TRAP    #15
000010E4  60EC                     123      BRA     MAIN_LOOP
000010E6                           124      
000010E6                           125      
000010E6                           126      
000010E6                           127    
000010E6                           128  ;; print nops
000010E6                           129  PRINT_NOPS_TEST
000010E6  103C 000F                130      MOVE.B  #15,D0  * Trap task 15 to print a signed number in the base in D2
000010EA  143C 0010                131      MOVE.B  #16,D2  * Base 16 for the next two TRAPs
000010EE                           132      * PRINT THE CURRENT ADDRESS
000010EE  220E                     133      MOVE.L  A6,D1
000010F0  4E4F                     134      TRAP    #15
000010F2  4281                     135      CLR.L   D1          * clear D1 so that it holds just the data on the next print
000010F4                           136      
000010F4  43F9 0000115B            137      LEA     COLON_SPACE,A1
000010FA  103C 000E                138      MOVE.B  #14,D0
000010FE  4E4F                     139      TRAP    #15
00001100                           140      
00001100  103C 0001                141      MOVE.B  #1,D0   * Print string, no CRLF
00001104                           142      
00001104                           143      
00001104                           144      
00001104                           145      
00001104                           146  
00001104                           147  ;; ~~~~~~~~BEGINNING OF PRINT LOOP~~~~~~~~   
00001104                           148  PRINT_IT          ;; Placeholder for now; just prints all data between start and end
00001104  43F9 00001203            149      LEA     PRINT_IT_STRING,A1
0000110A  103C 000D                150      MOVE.B  #13,D0
0000110E  4E4F                     151      TRAP    #15
00001110                           152      
00001110                           153  PRINT_IT_LOOP
00001110  103C 000F                154      MOVE.B  #15,D0  * Trap task 15 to print a signed number in the base in D2
00001114  143C 0010                155      MOVE.B  #16,D2  * Base 16 for the next two TRAPs
00001118                           156      * PRINT THE CURRENT ADDRESS
00001118  220E                     157      MOVE.L  A6,D1
0000111A  4E4F                     158      TRAP    #15
0000111C  4281                     159      CLR.L   D1          * clear D1 so that it holds just the data on the next print
0000111E                           160      
0000111E  43F9 0000115B            161      LEA     COLON_SPACE,A1
00001124  103C 000E                162      MOVE.B  #14,D0
00001128  4E4F                     163      TRAP    #15
0000112A                           164      
0000112A  221E                     165      MOVE.L  (A6)+,D1    * move the data at the pointer into D1 and increment.
0000112C  103C 000F                166      MOVE.B  #15,D0      * Trap task 15 to print a signed number in the base in D2
00001130  4E4F                     167      TRAP    #15
00001132                           168      
00001132                           169      * Print a new line
00001132  43F9 00001152            170      LEA     NEW_LINE,A1
00001138  103C 000D                171      MOVE.B  #13,D0
0000113C  4E4F                     172      TRAP    #15
0000113E                           173      
0000113E                           174      * Check if end address has been reached
0000113E  BDCD                     175      CMP.L   A5,A6
00001140  6FCE                     176      BLE     PRINT_IT_LOOP
00001142                           177  ;; ~~~~~~~~END OF PRINT LOOP~~~~~~~~
00001142                           178  
00001142                           179  
00001142                           180      
00001142                           181      
00001142  43F9 00001155            182      LEA     DONE_MSG,A1
00001148  103C 000D                183      MOVE.B  #13,D0
0000114C  4E4F                     184      TRAP    #15
0000114E                           185  
0000114E  FFFF FFFF                186      SIMHALT             ; halt simulator
00001152                           187  
00001152                           188  * Put variables and constants here
00001152                           189  
00001152                           190  *** ASCII constants used in the conversion loop. Subtract these from an ASCII character to get its
00001152                           191  *** real hex value (depending on whether it's a digit or a character).
00001152  =00000030                192  ASC_NUM_MIN     EQU     $30     * ASCII key for 0
00001152  =00000039                193  ASC_NUM_MAX     EQU     $39     * ASCII key for 9
00001152  =00000041                194  ASC_CHAR_MIN    EQU     $41     * ASCII key for A
00001152  =00000046                195  ASC_CHAR_MAX    EQU     $46     * ASCII key for F
00001152                           196  
00001152                           197  *** Message strings
00001152                           198      * Temporary; used for debugging and testing
00001152= 00 0D 0A                 199  NEW_LINE        DC.B    '',0,CR,LF
00001155                           200      * Temporary; used for debugging and testing
00001155= 44 6F 6E 65 2E 00        201  DONE_MSG        DC.B    'Done.',0
0000115B                           202      * Temporary; used for debugging and testing
0000115B= 3A 20 00                 203  COLON_SPACE     DC.B    ': ',0
0000115E= 49 6E 76 61 6C 69 ...    204  INVALID_INPUT   DC.B    'Invalid input! Out of Range.',0
0000117B= 49 6E 76 61 6C 69 ...    205  END_LTE_BEG     DC.B    'Invalid input! End address is less than or equal to start address.',0  
000011BE= 45 6E 74 65 72 20 ...    206  ADDR_PRMPT_STRT DC.B    'Enter a starting address in hex: $',0
000011E1= 45 6E 74 65 72 20 ...    207  ADDR_PRMPT_END  DC.B    'Enter an ending address in hex: $',0
00001203= 49 20 61 6D 20 61 ...    208  PRINT_IT_STRING DC.B    'I am a PRINT_IT string. It is printing time!',0
00001230  =0000000A                209  LF              EQU      $0A
00001230  =0000000D                210  CR              EQU      $0D
00001230                           211  
00001230= 00000001                 212  buffer  DC.L    1
00001234                           213  
00001234  =00008000                214  DISM_CODE     EQU     $8000 * Where to write disassembled code
00001234                           215      
00001234  4E71                     216      NOP
00001236                           217  
00001236                           218  END_NOW
00001236  43F8 1155                219      LEA     DONE_MSG,A1
0000123A  103C 0001                220      MOVE.B  #1,D0
0000123E  4E4F                     221      TRAP    #15
00001240  43F8 1230                222      LEA     buffer,A1
00001244                           223      
00001244                           224      INCLUDE 'OP.X68'
00001244                           225  
00001244                           226  ;; ~*~*~*~*~*~*~*~BEGIN OPCODE MODULE~*~*~*~*~*~*~*~
00001244                           227  
00001244                           228  OP_DECODE
00001244  3A1E                     229      MOVE.W  (A6)+,D5     * Load the next opcode to decode into D5, incrementing
00001246                           230      * NOTE: A6 now points at either the next opcode or imm. data for EA part
00001246                           231      
00001246                           232      * is it NOP?
00001246  BA7C 4E71                233      CMP.W   #CODE_NOP,D5
0000124A  6700 00D4                234      BEQ     DO_NOP      * After execution of this branch, will return to I/O
0000124E                           235      
0000124E                           236      * is it RTS?
0000124E  BA7C 4E75                237      CMP.W   #CODE_RTS,D5
00001252  6700 00DE                238      BEQ     DO_RTS      * After execution of this branch, will return to I/O
00001256                           239      
00001256                           240      ** Not NOP or RTS, check bit-by-bit to narrow down
00001256                           241      
00001256  0805 000F                242      BTST.L  #15,D5       * Test the most significant bit of the command
0000125A  6700 0008                243      BEQ     OXXX_BRA     * Branch to opcodes starting with zero     
0000125E                           244      * BRA     IXXX_BRA     * Branch to opcodes starting with a one  ******** COME BAK
0000125E                           245     
0000125E  6000 00C0                246      BRA     DO_NOP
00001262  4E75                     247      RTS * Return to I/O module (temporary; will go to EA module eventually)
00001264                           248      
00001264                           249      
00001264                           250  ;; ~~~~~~~~BRANCHES FOR NARROWING OPCODE SELECTION~~~~~~~~
00001264                           251  OXXX_BRA
00001264  0805 000E                252      BTST.L  #14,D5      * Test the second bit 
00001268  6700 0006                253      BEQ     OOXX_BRA    * Branch to opcodes starting with 00
0000126C  6000 0012                254      BRA     OIXX_BRA    * Branch to opcodes starting with 01   *** COME BAK
00001270                           255  
00001270                           256  OOXX_BRA
00001270  0805 000D                257      BTST.L  #13,D5          * Test the second bit 
00001274  6700 0016                258      BEQ     OOOX_BRA        * Branch to opcodes starting with 000
00001278  6000 001E                259      BRA     OOIX_BRA        * Might be MOVE, MOVEA
0000127C  6000 00EA                260      BRA     PRINT_INVALID_MSG
00001280                           261  OIXX_BRA
00001280  0805 000D                262      BTST.L  #13,D5
00001284  6700 0036                263      BEQ     OIOX_BRA    * CLR, JSR, MOVEM, LEA, ADDQ, SUBQ
00001288  6000 003E                264      BRA     OIIX_BRA    * BCC, OR MOVEQ
0000128C                           265  OOOX_BRA
0000128C  0805 000C                266      BTST.L  #12,D5              * Test the second bit 
00001290  6700 000A                267      BEQ     OOOO_BRA            * Decision for SUBI or ADDI
00001294  6000 00E4                268      BRA     PRINT_COME_BACK_MSG * might be MOVE, MOVEA, 
00001298                           269  OOIX_BRA
00001298                           270      * BTST.L  #12,D5              * Test the second bit 
00001298                           271      * BEQ     OOOO_BRA            * Decision for MOVE OR MOVEA
00001298  6000 00E0                272      BRA     PRINT_COME_BACK_MSG * might be MOVE, MOVEA, 
0000129C                           273  
0000129C                           274  
0000129C                           275  OOOO_BRA                    * tests for ADDI or SUBI
0000129C  343C 0600                276      MOVE.W  #ADDI_MASK,D2   * Load mask for ADDI temporarily into register for AND operation
000012A0  C445                     277      AND.W   D5,D2           * AND with current opcode data and store into D2
000012A2  B47C 0600                278      CMP.W   #$0600,D2       * Result of mask should be 0060 if the code is ADDi
000012A6  6700 0042                279      BEQ     DO_ADDI     
000012AA  343C 0400                280      MOVE.W  #SUBI_MASK,D2   * If it wasn't ADDI operation, check for SUBI
000012AE  C445                     281      AND.W   D5,D2
000012B0  B47C 0400                282      CMP.W   #$0400,D2
000012B4  6700 0046                283      BEQ     DO_SUBI
000012B8  6000 00AE                284      BRA     PRINT_INVALID_MSG
000012BC                           285  OIOX_BRA
000012BC  0805 000C                286      BTST.L  #12,D5
000012C0  6700 0012                287      BEQ     OIOO_BRA    * CLR, JSR, MOVEM, LEA   
000012C4  6000 0048                288      BRA     DO_ADDQ    * ADDQ 
000012C8                           289  OIIX_BRA
000012C8                           290      *check for MOVEQ and BCC here, which is 0110 always. there is no 0111
000012C8  0805 000C                291      BTST.L  #12,D5
000012CC  6700 0018                292      BEQ     OIIO_BRA            * BCC and MOVEQ happens here
000012D0  6000 0096                293      BRA     PRINT_INVALID_MSG   * There is no 0111
000012D4                           294  OIOO_BRA
000012D4                           295      ** Test for JSR
000012D4  343C 0E80                296      MOVE.W  #JSR_MASK,D2 * Load mask temporarily into register for ANDing
000012D8  C445                     297      AND.W   D5,D2        * AND with the current opcode data
000012DA  B47C 0E80                298      CMP.W   #$0E80,D2    * Result of mask should be 0E80 if code is JSR
000012DE  6700 0076                299      BEQ     DO_JSR       * 
000012E2  6000 0084                300      BRA     PRINT_INVALID_MSG
000012E6                           301  
000012E6                           302  OIIO_BRA
000012E6  6000 0092                303      BRA     PRINT_COME_BACK_MSG   * Need halp 
000012EA                           304  
000012EA                           305  ;; Typical structure for these chunks:
000012EA                           306  DO_ADDI
000012EA  47F9 000013B0            307      LEA     S_ADDI,A3
000012F0  1E3C 0001                308      MOVE.B  #1,D7
000012F4                           309      ** Eventually, EA Module will be called here
000012F4  4EB9 0000138C            310      JSR     WRITE
000012FA  4E75                     311      RTS
000012FC                           312  DO_SUBI
000012FC  47F9 000013B5            313      LEA     S_SUBI,A3
00001302  1E3C 0001                314      MOVE.B  #1,D7
00001306                           315      ** Eventually, EA Module will be called here
00001306  4EB9 0000138C            316      JSR     WRITE
0000130C  4E75                     317      RTS
0000130E                           318  DO_ADDQ
0000130E                           319      *Check for full opcode for 11 and onwards. if invalid, print the message
0000130E  47F9 000013AB            320      LEA     S_ADDQ,A3
00001314  1E3C 0001                321      MOVE.B  #1,D7
00001318                           322      ** Eventually, EA Module will be called here
00001318  4EB9 0000138C            323      JSR     WRITE
0000131E  4E75                     324      RTS
00001320                           325  
00001320                           326  DO_NOP
00001320  47F9 0000139A            327      LEA     S_NOP,A3    * Load the NOP string into A3 for WRITE subroutine
00001326  1E3C 0001                328      MOVE.B  #1,D7       * Store key for op code for EA module
0000132A                           329      ** Eventually, EA Module will be called here
0000132A  4EB9 0000138C            330      JSR     WRITE       * Jump to WRITE subroutine
00001330  4E75                     331      RTS                 * Return to I/O module 
00001332                           332      
00001332                           333  
00001332                           334  DO_RTS
00001332  47F9 0000139E            335      LEA     S_RTS,A3    * Load the RTS string into A3 for WRITE subroutine
00001338  1E3C 001C                336      MOVE.B  #28,D7      * Store key for op code for EA module
0000133C                           337      ** Eventually, EA Module will be called here
0000133C  4EB9 0000138C            338      JSR     WRITE       * Jump to WRITE subroutine
00001342  4E75                     339      RTS                 * Return to the I/O module bra op_decode
00001344                           340      
00001344                           341  DO_MOVE
00001344  47F9 000013A2            342      LEA     S_MOVE,A3
0000134A  1E3C 0002                343      MOVE.B  #2,D7
0000134E                           344      ** Eventually, EA Module will be called here
0000134E  4EB9 0000138C            345      JSR     WRITE
00001354  4E75                     346      RTS
00001356                           347      
00001356                           348  DO_JSR
00001356  47F9 000013A7            349      LEA     S_JSR,A3
0000135C  1E3C 001B                350      MOVE.B  #27,D7
00001360                           351      ** Eventually, NOCK will be called here
00001360  4EB9 0000138C            352      JSR     WRITE
00001366  4E75                     353      RTS
00001368                           354  PRINT_INVALID_MSG
00001368  47F9 000013BA            355      LEA     INVALID,A3
0000136E  1E3C 0000                356      MOVE.B  #0,D7
00001372                           357      ** Eventually, NOCK will be called here
00001372  4EB9 0000138C            358      JSR     WRITE
00001378  4E75                     359      RTS
0000137A                           360  
0000137A                           361  PRINT_COME_BACK_MSG
0000137A  47F9 000013E6            362      LEA     COMEBK,A3
00001380  1E3C 0000                363      MOVE.B  #0,D7
00001384                           364      ** Eventually, NOCK will be called here
00001384  4EB9 0000138C            365      JSR     WRITE
0000138A  4E75                     366      RTS
0000138C                           367  WRITE   * Writes string pointed to by A3 to memory pointed to by A1
0000138C  224C                     368      MOVEA.L A4,A1     * Save the position of A1 before writing (for I/0)
0000138E                           369  WRITE_LOOP
0000138E  18DB                     370      MOVE.B  (A3)+,(A4)+     * Write one byte and increment
00001390  0C13 0000                371      CMP.B   #0,(A3)         * Are we at the null terminator?
00001394  66F8                     372      BNE     WRITE_LOOP      * If not, keep going
00001396  18DB                     373      MOVE.B  (A3)+,(A4)+     * Write the null terminator before exiting
00001398  4E75                     374      RTS                     * Executes once null terminator was reached
0000139A                           375      
0000139A                           376  ;; ~~~~~~~~STRING CONSTANTS~~~~~~~~
0000139A                           377  
0000139A  =00004E71                378  CODE_NOP    EQU     $4E71
0000139A  =00004E75                379  CODE_RTS    EQU     $4E75
0000139A                           380  
0000139A  =00002000                381  A4_PREV     SET     $2000
0000139A                           382  
0000139A= 4E 4F 50 00              383  S_NOP   DC.B    'NOP',0
0000139E= 52 54 53 00              384  S_RTS   DC.B    'RTS',0
000013A2= 4D 4F 56 45 00           385  S_MOVE  DC.B    'MOVE',0
000013A7= 4A 53 52 00              386  S_JSR   DC.B    'JSR',0
000013AB= 41 44 44 51 00           387  S_ADDQ  DC.B    'ADDQ',0
000013B0= 41 44 44 49 00           388  S_ADDI  DC.B    'ADDI',0
000013B5= 53 55 42 49 00           389  S_SUBI  DC.B    'SUBI',0
000013BA= 49 4E 56 41 4C 49 ...    390  INVALID DC.B    'INVALID OPCODE. LETS FIX THIS MESSAGE LATER',0
000013E6= 43 6F 6D 65 20 62 ...    391  COMEBK  DC.B    'Come back to me pls dont forget me',0 
00001409                           392  
00001409                           393  
00001409  =00000E80                394  JSR_MASK    EQU     %0000111010000000
00001409  =00000600                395  ADDI_MASK   EQU     %0000011000000000
00001409  =00000400                396  SUBI_MASK   EQU     %0000010000000000
00001409  =00000000                397  BYTE_MASK   EQU     %0000000000000000
00001409  =00000040                398  WORD_MASK   EQU     %0000000001000000
00001409  =00000080                399  LONG_MASK   EQU     %0000000010000000         
00001409                           400  ;; ~*~*~*~*~*~*~*~END OPCODE MODULE~*~*~*~*~*~*~*~
00001409                           401  
00001409                           402  
00001409                           403  -------------------- end include --------------------
00001409                           404      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A4_PREV             2000
ADDI_MASK           600
ADDR_PRMPT_END      11E1
ADDR_PRMPT_STRT     11BE
ASC_CHAR_MAX        46
ASC_CHAR_MIN        41
ASC_NUM_MAX         39
ASC_NUM_MIN         30
ASC_TO_CHAR         109C
ASC_TO_NUM          1092
BUFFER              1230
BYTE_MASK           0
CHECK_CHAR_MAX      1086
CHECK_CHAR_MIN      107A
CHECK_NUM_MAX       106C
CHECK_NUM_MIN       1060
CODE_NOP            4E71
CODE_RTS            4E75
COLON_SPACE         115B
COMEBK              13E6
CONVERSION_LOOP     105E
CR                  D
DISM_CODE           8000
DONE_MSG            1155
DO_ADDI             12EA
DO_ADDQ             130E
DO_JSR              1356
DO_MOVE             1344
DO_NOP              1320
DO_RTS              1332
DO_SUBI             12FC
END_LTE_BEG         117B
END_NOW             1236
ERROR_END_LTE_BEG   10C2
ERROR_INV_INP       10B2
INVALID             13BA
INVALID_INPUT       115E
JSR_MASK            E80
LF                  A
LONG_MASK           80
MAIN_LOOP           10D2
NEW_LINE            1152
OIIO_BRA            12E6
OIIX_BRA            12C8
OIOO_BRA            12D4
OIOX_BRA            12BC
OIXX_BRA            1280
OOIX_BRA            1298
OOOO_BRA            129C
OOOX_BRA            128C
OOXX_BRA            1270
OP_DECODE           1244
OXXX_BRA            1264
PRINT_COME_BACK_MSG  137A
PRINT_INVALID_MSG   1368
PRINT_IT            1104
PRINT_IT_LOOP       1110
PRINT_IT_STRING     1203
PRINT_LOOP          10DE
PRINT_NOPS_TEST     10E6
SHIFTS              10A6
START               1000
SUBI_MASK           400
S_ADDI              13B0
S_ADDQ              13AB
S_JSR               13A7
S_MOVE              13A2
S_NOP               139A
S_RTS               139E
S_SUBI              13B5
WORD_MASK           40
WRITE               138C
WRITE_LOOP          138E
