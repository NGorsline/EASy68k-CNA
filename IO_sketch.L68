00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/20/2018 5:58:39 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :  Disassembler I/O 
00000000                             3  * Written by :  touCANs
00000000                             4  * Date       :  5/1/18 - 
00000000                             5  * Description:  I/O functionality for the disassembler 
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000  287C 00008000             11      MOVEA.L #DISM_CODE,A4
00001006                            12      
00001006  43F9 000011BE             13      LEA     ADDR_PRMPT_STRT,A1
0000100C  103C 000E                 14      MOVE.B  #14,D0
00001010  4E4F                      15      TRAP    #15
00001012                            16  
00001012  43F9 00001230             17      LEA     buffer,A1       * Load buffer's effective address into A1
00001018  103C 0002                 18      MOVE.B  #2,D0           * get the starting address from the user as a string
0000101C                            19      
0000101C  4E4F                      20      TRAP    #15         
0000101E                            21      
0000101E                            22  *** Need to first check if D1 is a valid size of minimum 4 (user entered at least 4 hexa bits)
0000101E  B27C 0004                 23      CMP     #4,D1           * minimum of a word for the address
00001022  6D00 008E                 24      BLT     ERROR_INV_INP   * invalid start address  
00001026                            25      
00001026  4EB9 0000105E             26      JSR     CONVERSION_LOOP * convert the starting address
0000102C                            27      
0000102C                            28  *** FULL STARTING ADDRESS HAS BEEN CONVERTED, STORE IN A6 AND GET ENDING ADDRESSS
0000102C  2C42                      29      MOVEA.L D2,A6           * move converted addr to A6 (A6 acts as iterator while disassembling)
0000102E  4282                      30      CLR.L   D2              * clear register D2 in preparation to hold the converted end address
00001030  4284                      31      CLR.L   D4              * clear register D4 to start the counter at 0 again
00001032                            32      
00001032  43F9 000011E1             33      LEA     ADDR_PRMPT_END,A1
00001038  103C 000E                 34      MOVE.B  #14,D0
0000103C  4E4F                      35      TRAP    #15
0000103E                            36      
0000103E  103C 0002                 37      MOVE.B  #2,D0           * get the ending address from the user as a string
00001042  4E4F                      38      TRAP    #15
00001044                            39      
00001044                            40  *** Need to first check if D1 is a valid size of minimum 4 (user entered at least 4 hexa bits)
00001044  B27C 0004                 41      CMP     #4,D1           * minimum of a word for the address
00001048  6D00 0068                 42      BLT     ERROR_INV_INP   * invalid end address
0000104C                            43      
0000104C  4EB9 0000105E             44      JSR     CONVERSION_LOOP * convert the ending address
00001052  2A42                      45      MOVEA.L D2,A5           * move converted addr to A5 (compare A6 to A5 to know when to stop)
00001054  BDCD                      46      CMPA.L  A5,A6           * check if beginning address is >= end address. If so, display error
00001056  6C00 006A                 47      BGE     ERROR_END_LTE_BEG
0000105A  6000 0076                 48      BRA     MAIN_LOOP       * skip past the CONVERSION_LOOP subroutine to continue with the program
0000105E                            49      
0000105E                            50  
0000105E                            51  
0000105E                            52  *    ADDI.B  #1,D4           * offset our counter to start at 1
0000105E                            53  
0000105E                            54  
0000105E                            55  ;; ~~~~~~~~BEGINNING OF CONVERSION SUBROUTINE~~~~~~~~
0000105E                            56  CONVERSION_LOOP       
0000105E  1619                      57      MOVE.B  (A1)+,D3        * store the next thingy B
00001060                            58  *** Need to check for proper hex conversion 
00001060                            59  
00001060                            60  CHECK_NUM_MIN     ;; Checks if number is >= 30 (0) in ASCII
00001060  B67C 0030                 61      CMP     #ASC_NUM_MIN,D3 * Range of ASCII numbers: (2F >= 3A)[2F,3A] then subtract 30    
00001064  6C00 0006                 62      BGE     CHECK_NUM_MAX   * check if it's in range for x > 2F
00001068  6000 0048                 63      BRA     ERROR_INV_INP   * First condition not met, go to bad input error 
0000106C                            64      
0000106C                            65  CHECK_NUM_MAX     ;; Checks if number is <= 39 (9) in ASCII
0000106C  B67C 0039                 66      CMP     #ASC_NUM_MAX,D3
00001070  6F00 0020                 67      BLE     ASC_TO_NUM      * If condition for the range was met, do the math
00001074  4EF9 0000107A             68      JMP     CHECK_CHAR_MIN  * Second condition was not met, check if a character
0000107A                            69      
0000107A                            70  CHECK_CHAR_MIN    ;; Checks if number is >= 41 (A) in ASCII
0000107A  B67C 0041                 71      CMP     #ASC_CHAR_MIN,D3
0000107E  6C00 0006                 72      BGE     CHECK_CHAR_MAX  
00001082  6000 002E                 73      BRA     ERROR_INV_INP   * First condition not met, D3 < 41 = symbols. Go to bad input error
00001086                            74      
00001086                            75  CHECK_CHAR_MAX    ;; Checks if number is <= 46 (F) in ASCII
00001086  B67C 0046                 76      CMP     #ASC_CHAR_MAX,D3
0000108A  6F00 0010                 77      BLE     ASC_TO_CHAR     * Condition was met for A-F     
0000108E  6000 0022                 78      BRA     ERROR_INV_INP   * Greater than 46 = out of 16-bit system
00001092                            79      
00001092                            80  ASC_TO_NUM        ;; Converts a string digit into a hex value
00001092  0403 0030                 81      SUBI.B  #$30,D3
00001096  4EF9 000010A6             82      JMP     SHIFTS          * After this routine is finished, complete shifts/adds
0000109C                            83      
0000109C                            84  ASC_TO_CHAR       ;; Converts a string character into a hex value
0000109C  0403 0037                 85      SUBI.B  #$37,D3    
000010A0  4EF9 000010A6             86      JMP     SHIFTS          * Convert a string character into a hex value
000010A6                            87      
000010A6                            88  SHIFTS            ;; Shifts D2 left by four bits to make room for the newly converted hexabit
000010A6  E98A                      89      LSL.L   #4,D2           * Initial value in D2 shifted hexabit over to the left to make room   
000010A8  D403                      90      ADD.B   D3,D2           * Add modified value from D3 into D2.
000010AA                            91      
000010AA  5204                      92      ADD.B   #1,D4           * Increment counter by 1 
000010AC  B244                      93      CMP     D4,D1           * Check if we have already reached the end of the input. D4 = counter
000010AE  66AE                      94      BNE     CONVERSION_LOOP * Continue back to the loop if D4 != D1  
000010B0  4E75                      95      RTS
000010B2                            96  ;; ~~~~~~~~END OF CONVERSION SUBROUTINE~~~~~~~~
000010B2                            97      
000010B2                            98      
000010B2                            99      
000010B2                           100  ERROR_INV_INP ;; Prints the INVALID_INPUT error message to the console
000010B2  43F9 0000115E            101      LEA     INVALID_INPUT,A1
000010B8  103C 000D                102      MOVE.B  #13,D0
000010BC  4E4F                     103      TRAP    #15
000010BE  6000 0176                104      BRA     END_NOW
000010C2                           105      
000010C2                           106  ERROR_END_LTE_BEG ;; Prints the END_LTE_BEG (end <= to beginning) error message to the console.
000010C2  43F9 0000117B            107      LEA     END_LTE_BEG,A1
000010C8  103C 000D                108      MOVE.B  #13,D0
000010CC  4E4F                     109      TRAP    #15
000010CE  6000 0166                110      BRA     END_NOW
000010D2                           111    
000010D2                           112    
000010D2                           113  MAIN_LOOP
000010D2                           114      *BRA     END_NOW
000010D2  BDCD                     115      CMPA.L  A5,A6
000010D4  6C00 0160                116      BGE     END_NOW * End program
000010D8                           117      *MOVE.W  A6,D0   * Copy A6 location to restore after jump to SR
000010D8  4EB9 00001244            118      JSR     OP_DECODE
000010DE                           119      
000010DE                           120  PRINT_LOOP ;; Print the most recently decoded line
000010DE  103C 000D                121      MOVE.B  #13,D0
000010E2  4E4F                     122      TRAP    #15
000010E4  60EC                     123      BRA     MAIN_LOOP
000010E6                           124      
000010E6                           125  ;; print nops
000010E6                           126  PRINT_NOPS_TEST
000010E6  103C 000F                127      MOVE.B  #15,D0  * Trap task 15 to print a signed number in the base in D2
000010EA  143C 0010                128      MOVE.B  #16,D2  * Base 16 for the next two TRAPs
000010EE                           129      * PRINT THE CURRENT ADDRESS
000010EE  220E                     130      MOVE.L  A6,D1
000010F0  4E4F                     131      TRAP    #15
000010F2  4281                     132      CLR.L   D1          * clear D1 so that it holds just the data on the next print
000010F4                           133      
000010F4  43F9 0000115B            134      LEA     COLON_SPACE,A1
000010FA  103C 000E                135      MOVE.B  #14,D0
000010FE  4E4F                     136      TRAP    #15
00001100                           137      
00001100  103C 0001                138      MOVE.B  #1,D0   * Print string, no CRLF
00001104                           139      
00001104                           140      
00001104                           141      
00001104                           142      
00001104                           143  
00001104                           144  ;; ~~~~~~~~BEGINNING OF PRINT LOOP~~~~~~~~   
00001104                           145  PRINT_IT          ;; Placeholder for now; just prints all data between start and end
00001104  43F9 00001203            146      LEA     PRINT_IT_STRING,A1
0000110A  103C 000D                147      MOVE.B  #13,D0
0000110E  4E4F                     148      TRAP    #15
00001110                           149      
00001110                           150  PRINT_IT_LOOP
00001110  103C 000F                151      MOVE.B  #15,D0  * Trap task 15 to print a signed number in the base in D2
00001114  143C 0010                152      MOVE.B  #16,D2  * Base 16 for the next two TRAPs
00001118                           153      * PRINT THE CURRENT ADDRESS
00001118  220E                     154      MOVE.L  A6,D1
0000111A  4E4F                     155      TRAP    #15
0000111C  4281                     156      CLR.L   D1          * clear D1 so that it holds just the data on the next print
0000111E                           157      
0000111E  43F9 0000115B            158      LEA     COLON_SPACE,A1
00001124  103C 000E                159      MOVE.B  #14,D0
00001128  4E4F                     160      TRAP    #15
0000112A                           161      
0000112A  221E                     162      MOVE.L  (A6)+,D1    * move the data at the pointer into D1 and increment.
0000112C  103C 000F                163      MOVE.B  #15,D0      * Trap task 15 to print a signed number in the base in D2
00001130  4E4F                     164      TRAP    #15
00001132                           165      
00001132                           166      * Print a new line
00001132  43F9 00001152            167      LEA     NEW_LINE,A1
00001138  103C 000D                168      MOVE.B  #13,D0
0000113C  4E4F                     169      TRAP    #15
0000113E                           170      
0000113E                           171      * Check if end address has been reached
0000113E  BDCD                     172      CMP.L   A5,A6
00001140  6FCE                     173      BLE     PRINT_IT_LOOP
00001142                           174  ;; ~~~~~~~~END OF PRINT LOOP~~~~~~~~
00001142                           175  
00001142                           176  
00001142                           177      
00001142                           178      
00001142  43F9 00001155            179      LEA     DONE_MSG,A1
00001148  103C 000D                180      MOVE.B  #13,D0
0000114C  4E4F                     181      TRAP    #15
0000114E                           182  
0000114E  FFFF FFFF                183      SIMHALT             ; halt simulator
00001152                           184  
00001152                           185  * Put variables and constants here
00001152                           186  
00001152                           187  *** ASCII constants used in the conversion loop. Subtract these from an ASCII character to get its
00001152                           188  *** real hex value (depending on whether it's a digit or a character).
00001152  =00000030                189  ASC_NUM_MIN     EQU     $30     * ASCII key for 0
00001152  =00000039                190  ASC_NUM_MAX     EQU     $39     * ASCII key for 9
00001152  =00000041                191  ASC_CHAR_MIN    EQU     $41     * ASCII key for A
00001152  =00000046                192  ASC_CHAR_MAX    EQU     $46     * ASCII key for F
00001152                           193  
00001152                           194  *** Message strings
00001152                           195      * Temporary; used for debugging and testing
00001152= 00 0D 0A                 196  NEW_LINE        DC.B    '',0,CR,LF
00001155                           197      * Temporary; used for debugging and testing
00001155= 44 6F 6E 65 2E 00        198  DONE_MSG        DC.B    'Done.',0
0000115B                           199      * Temporary; used for debugging and testing
0000115B= 3A 20 00                 200  COLON_SPACE     DC.B    ': ',0
0000115E= 49 6E 76 61 6C 69 ...    201  INVALID_INPUT   DC.B    'Invalid input! Out of Range.',0
0000117B= 49 6E 76 61 6C 69 ...    202  END_LTE_BEG     DC.B    'Invalid input! End address is less than or equal to start address.',0  
000011BE= 45 6E 74 65 72 20 ...    203  ADDR_PRMPT_STRT DC.B    'Enter a starting address in hex: $',0
000011E1= 45 6E 74 65 72 20 ...    204  ADDR_PRMPT_END  DC.B    'Enter an ending address in hex: $',0
00001203= 49 20 61 6D 20 61 ...    205  PRINT_IT_STRING DC.B    'I am a PRINT_IT string. It is printing time!',0
00001230  =0000000A                206  LF              EQU      $0A
00001230  =0000000D                207  CR              EQU      $0D
00001230                           208  
00001230= 00000001                 209  buffer  DC.L    1
00001234                           210  
00001234  =00008000                211  DISM_CODE     EQU     $8000 * Where to write disassembled code
00001234                           212      
00001234  4E71                     213      NOP
00001236                           214  
00001236                           215  END_NOW
00001236  43F8 1155                216      LEA     DONE_MSG,A1
0000123A  103C 0001                217      MOVE.B  #1,D0
0000123E  4E4F                     218      TRAP    #15
00001240  43F8 1230                219      LEA     buffer,A1
00001244                           220      
00001244                           221      INCLUDE 'OP.X68'
00001244                           222  
00001244                           223  ;; ~*~*~*~*~*~*~*~BEGIN OPCODE MODULE~*~*~*~*~*~*~*~
00001244                           224  
00001244                           225  OP_DECODE
00001244  3A1E                     226      MOVE.W  (A6)+,D5     * Load the next opcode to decode into D5, incrementing
00001246                           227      * NOTE: A6 now points at either the next opcode or imm. data for EA part
00001246                           228      
00001246                           229      * is it NOP?
00001246  BA7C 4E71                230      CMP.W   #CODE_NOP,D5
0000124A  6700 0116                231      BEQ     DO_NOP      * After execution of this branch, will return to I/O
0000124E                           232      
0000124E                           233      * is it RTS?
0000124E  BA7C 4E75                234      CMP.W   #CODE_RTS,D5
00001252  6700 0120                235      BEQ     DO_RTS      * After execution of this branch, will return to I/O
00001256                           236      
00001256                           237      ** Not NOP or RTS, check bit-by-bit to narrow down
00001256                           238      
00001256  0805 000F                239      BTST.L  #15,D5       * Test the most significant bit of the command
0000125A  6700 000C                240      BEQ     OXXX_BRA     * Branch to opcodes starting with zero     
0000125E  6000 00A4                241      BRA     IXXX_BRA     * Branch to opcodes starting with a one  ******** COME BAK
00001262                           242     
00001262  6000 00FE                243      BRA     DO_NOP
00001266  4E75                     244      RTS * Return to I/O module (temporary; will go to EA module eventually)
00001268                           245      
00001268                           246  OXXX_BRA
00001268  0805 000E                247      BTST.L  #14,D5      * Test the second bit 
0000126C  6700 0006                248      BEQ     OOXX_BRA    * Branch to opcodes starting with 00
00001270  6000 0012                249      BRA     OIXX_BRA    * Branch to opcodes starting with 01   *** COME BAK
00001274                           250  
00001274                           251  OOXX_BRA
00001274  0805 000D                252      BTST.L  #13,D5          * Test the second bit 
00001278  6700 0016                253      BEQ     OOOX_BRA        * Branch to opcodes starting with 000
0000127C  6000 001E                254      BRA     OOIX_BRA        * Might be MOVE, MOVEA
00001280  6000 0128                255      BRA     PRINT_INVALID_MSG
00001284                           256  OIXX_BRA
00001284  0805 000D                257      BTST.L  #13,D5
00001288  6700 0030                258      BEQ     OIOX_BRA    * CLR, JSR, MOVEM, LEA, ADDQ, SUBQ
0000128C  6000 0038                259      BRA     OIIX_BRA    * BCC, OR MOVEQ
00001290                           260  OOOX_BRA
00001290  0805 000C                261      BTST.L  #12,D5              * Test the second bit 
00001294  6700 000A                262      BEQ     OOOO_BRA            * Decision for SUBI or ADDI
00001298  6000 0134                263      BRA     PRINT_COME_BACK_MSG * might be MOVE, MOVEA, 
0000129C                           264  OOIX_BRA
0000129C                           265      * BTST.L  #12,D5              * Test the second bit 
0000129C                           266      * BEQ     OOOO_BRA            * Decision for MOVE OR MOVEA
0000129C  6000 0130                267      BRA     PRINT_COME_BACK_MSG * might be MOVE, MOVEA, 
000012A0                           268  OOOO_BRA                        * tests for ADDI or SUBI
000012A0  343C 0F00                269      MOVE.W  #ADDSUBI_MASK,D2   * Load mask for ADDI temporarily into register for AND operation
000012A4  C445                     270      AND.W   D5,D2               * AND with current opcode data and store into D2
000012A6  B47C 0600                271      CMP.W   #$0600,D2           * Result of mask should be 0060 if the code is ADDi
000012AA  6700 005C                272      BEQ     DO_ADDI     
000012AE  B47C 0400                273      CMP.W   #$0400,D2           * SUBI and ADDI  have the same bitmask.
000012B2  6700 0066                274      BEQ     DO_SUBI
000012B6  6000 00F2                275      BRA     PRINT_INVALID_MSG
000012BA                           276  OIOX_BRA
000012BA  0805 000C                277      BTST.L  #12,D5
000012BE  6700 0012                278      BEQ     OIOO_BRA    * CLR, JSR, MOVEM, LEA   
000012C2  6000 0068                279      BRA     DO_ADDQ    * ADDQ 
000012C6                           280  OIIX_BRA
000012C6                           281      *check for MOVEQ and BCC here, which is 0110 always. there is no 0111
000012C6  0805 000C                282      BTST.L  #12,D5
000012CA  6700 0034                283      BEQ     OIIO_BRA            * BCC and MOVEQ happens here
000012CE  6000 00DA                284      BRA     PRINT_INVALID_MSG   * There is no 0111
000012D2                           285  OIOO_BRA
000012D2                           286      ** Test for JSR
000012D2  343C 0FC0                287      MOVE.W  #JSR_MASK,D2 * Load mask temporarily into register for ANDing
000012D6  C445                     288      AND.W   D5,D2        * AND with the current opcode data
000012D8  B47C 0E80                289      CMP.W   #$0E80,D2    * Result of mask should be 0E80 if code is JSR
000012DC  6700 00BA                290      BEQ     DO_JSR       *
000012E0                           291  
000012E0  343C 0F00                292      MOVE.W  #CLR_MASK,D2
000012E4  C445                     293      AND.W   D5,D2
000012E6  B47C 0200                294      CMP.W   #$0200,D2              * IS IT CLR?
000012EA  6700 0052                295      BEQ     DO_CLR
000012EE                           296  
000012EE  343C 01C0                297      MOVE.W  #LEA_MASK,D2
000012F2  C445                     298      AND     D5,D2
000012F4  B47C 01C0                299      CMP.W   #$01C0,D2              *EQUAL TO LEA?
000012F8  6700 0056                300      BEQ.W   DO_LEA
000012FC  6000 00BE                301      BRA     PRINT_OIOO_ERROR       * if not RTS, not JSR, CLR, or LEA, then its invalid. 
00001300                           302  
00001300                           303  OIIO_BRA
00001300  6000 00CC                304      BRA     PRINT_COME_BACK_MSG   * Need halp 
00001304                           305  
00001304                           306  IXXX_BRA
00001304  6000 00C8                307      BRA     PRINT_COME_BACK_MSG   * temporary until further development of right branch 
00001308                           308  
00001308                           309  ;; Typical structure for these chunks:
00001308                           310  DO_ADDI
00001308  47F9 00001404            311      LEA     S_ADDI,A3
0000130E  1E3C 0008                312      MOVE.B  #8,D7
00001312                           313      ** Eventually, EA Module will be called here
00001312  4EB9 000013E0            314      JSR     WRITE
00001318  4E75                     315      RTS
0000131A                           316  DO_SUBI
0000131A  47F9 00001409            317      LEA     S_SUBI,A3
00001320  1E3C 000B                318      MOVE.B  #11,D7
00001324                           319      ** Eventually, EA Module will be called here
00001324  4EB9 000013E0            320      JSR     WRITE
0000132A  4E75                     321      RTS
0000132C                           322  DO_ADDQ
0000132C                           323      *Check for full opcode for 11 and onwards. if invalid, print the message
0000132C  47F9 000013FF            324      LEA     S_ADDQ,A3
00001332  1E3C 0009                325      MOVE.B  #9,D7
00001336                           326      ** Eventually, EA Module will be called here
00001336  4EB9 000013E0            327      JSR     WRITE
0000133C  4E75                     328      RTS
0000133E                           329  DO_CLR
0000133E  47F9 0000140E            330      LEA     S_CLR,A3
00001344  1E3C 0010                331      MOVE.B  #16,D7
00001348                           332      ** Eventually, EA Module will be called here
00001348  4EB9 000013E0            333      JSR     WRITE
0000134E  4E75                     334      RTS
00001350                           335  DO_LEA
00001350  47F9 00001412            336      LEA     S_LEA,A3    * Load the NOP string into A3 for WRITE subroutine
00001356  1E3C 000F                337      MOVE.B  #15,D7       * Store key for op code for EA module
0000135A                           338      ** Eventually, EA Module will be called here
0000135A  4EB9 000013E0            339      JSR     WRITE       * Jump to WRITE subroutine
00001360  4E75                     340      RTS                 * Return to I/O module 
00001362                           341  DO_NOP
00001362  47F9 000013EE            342      LEA     S_NOP,A3    * Load the NOP string into A3 for WRITE subroutine
00001368  1E3C 0001                343      MOVE.B  #1,D7       * Store key for op code for EA module
0000136C                           344      ** Eventually, EA Module will be called here
0000136C  4EB9 000013E0            345      JSR     WRITE       * Jump to WRITE subroutine
00001372  4E75                     346      RTS                 * Return to I/O module 
00001374                           347  DO_RTS
00001374  47F9 000013F2            348      LEA     S_RTS,A3    * Load the RTS string into A3 for WRITE subroutine
0000137A  1E3C 001C                349      MOVE.B  #28,D7      * Store key for op code for EA module
0000137E                           350      ** Eventually, EA Module will be called here
0000137E  4EB9 000013E0            351      JSR     WRITE       * Jump to WRITE subroutine
00001384  4E75                     352      RTS                 * Return to the I/O module bra op_decode  
00001386                           353  DO_MOVE
00001386  47F9 000013F6            354      LEA     S_MOVE,A3
0000138C  1E3C 0002                355      MOVE.B  #2,D7
00001390                           356      ** Eventually, EA Module will be called here
00001390  4EB9 000013E0            357      JSR     WRITE
00001396  4E75                     358      RTS
00001398                           359      
00001398                           360  DO_JSR
00001398  47F9 000013FB            361      LEA     S_JSR,A3
0000139E  1E3C 001B                362      MOVE.B  #27,D7
000013A2                           363      ** Eventually, NOCK will be called here
000013A2  4EB9 000013E0            364      JSR     WRITE
000013A8  4E75                     365      RTS
000013AA                           366  PRINT_INVALID_MSG
000013AA  47F9 00001416            367      LEA     INVALID,A3
000013B0  1E3C 0000                368      MOVE.B  #0,D7
000013B4                           369      ** Eventually, NOCK will be called here
000013B4  4EB9 000013E0            370      JSR     WRITE
000013BA  4E75                     371      RTS
000013BC                           372  PRINT_OIOO_ERROR
000013BC  47F9 00001465            373      LEA     BAD_OIOO,A3
000013C2  1E3C 0000                374      MOVE.B  #0,D7
000013C6                           375      ** Eventually, NOCK will be called here
000013C6  4EB9 000013E0            376      JSR     WRITE
000013CC  4E75                     377      RTS
000013CE                           378  PRINT_COME_BACK_MSG
000013CE  47F9 00001442            379      LEA     COMEBK,A3
000013D4  1E3C 0000                380      MOVE.B  #0,D7
000013D8                           381      ** Eventually, NOCK will be called here
000013D8  4EB9 000013E0            382      JSR     WRITE
000013DE  4E75                     383      RTS
000013E0                           384  WRITE   * Writes string pointed to by A3 to memory pointed to by A1
000013E0  224C                     385      MOVEA.L A4,A1     * Save the position of A1 before writing (for I/0)
000013E2                           386  WRITE_LOOP
000013E2  18DB                     387      MOVE.B  (A3)+,(A4)+     * Write one byte and increment
000013E4  0C13 0000                388      CMP.B   #0,(A3)         * Are we at the null terminator?
000013E8  66F8                     389      BNE     WRITE_LOOP      * If not, keep going
000013EA  18DB                     390      MOVE.B  (A3)+,(A4)+     * Write the null terminator before exiting
000013EC  4E75                     391      RTS                     * Executes once null terminator was reached
000013EE                           392      
000013EE                           393  ;; ~~~~~~~~STRING CONSTANTS~~~~~~~~
000013EE                           394  
000013EE  =00004E71                395  CODE_NOP    EQU     $4E71
000013EE  =00004E75                396  CODE_RTS    EQU     $4E75
000013EE                           397  
000013EE  =00002000                398  A4_PREV     SET     $2000
000013EE                           399  
000013EE= 4E 4F 50 00              400  S_NOP       DC.B    'NOP',0
000013F2= 52 54 53 00              401  S_RTS       DC.B    'RTS',0
000013F6= 4D 4F 56 45 00           402  S_MOVE      DC.B    'MOVE',0
000013FB= 4A 53 52 00              403  S_JSR       DC.B    'JSR',0
000013FF= 41 44 44 51 00           404  S_ADDQ      DC.B    'ADDQ',0
00001404= 41 44 44 49 00           405  S_ADDI      DC.B    'ADDI',0
00001409= 53 55 42 49 00           406  S_SUBI      DC.B    'SUBI',0
0000140E= 43 4C 52 00              407  S_CLR       DC.B    'CLR',0
00001412= 4C 45 41 00              408  S_LEA       DC.B    'LEA',0    
00001416= 49 4E 56 41 4C 49 ...    409  INVALID     DC.B    'INVALID OPCODE. LETS FIX THIS MESSAGE LATER',0
00001442= 43 6F 6D 65 20 62 ...    410  COMEBK      DC.B    'Come back to me pls dont forget me',0 
00001465= 42 61 64 20 4F 49 ...    411  BAD_OIOO    DC.B    'Bad OIOO maybe not JSR,RTS,CLR,LEA.. who knows.',0
00001495                           412  
00001495  =00000FC0                413  JSR_MASK        EQU     %0000111111000000
00001495  =00000F00                414  ADDSUBI_MASK    EQU     %0000111100000000       ** come back and fix this to be the same but diferent comparisons 
00001495  =00000000                415  BYTE_MASK       EQU     %0000000000000000
00001495  =00000040                416  WORD_MASK       EQU     %0000000001000000
00001495  =00000080                417  LONG_MASK       EQU     %0000000010000000  
00001495  =00000F00                418  CLR_MASK        EQU     %0000111100000000
00001495  =000001C0                419  LEA_MASK        EQU     %0000000111000000
00001495                           420  ;; ~*~*~*~*~*~*~*~END OPCODE MODULE~*~*~*~*~*~*~*~
00001495                           421  
00001495                           422  
00001495                           423  -------------------- end include --------------------
00001495                           424      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A4_PREV             2000
ADDR_PRMPT_END      11E1
ADDR_PRMPT_STRT     11BE
ADDSUBI_MASK        F00
ASC_CHAR_MAX        46
ASC_CHAR_MIN        41
ASC_NUM_MAX         39
ASC_NUM_MIN         30
ASC_TO_CHAR         109C
ASC_TO_NUM          1092
BAD_OIOO            1465
BUFFER              1230
BYTE_MASK           0
CHECK_CHAR_MAX      1086
CHECK_CHAR_MIN      107A
CHECK_NUM_MAX       106C
CHECK_NUM_MIN       1060
CLR_MASK            F00
CODE_NOP            4E71
CODE_RTS            4E75
COLON_SPACE         115B
COMEBK              1442
CONVERSION_LOOP     105E
CR                  D
DISM_CODE           8000
DONE_MSG            1155
DO_ADDI             1308
DO_ADDQ             132C
DO_CLR              133E
DO_JSR              1398
DO_LEA              1350
DO_MOVE             1386
DO_NOP              1362
DO_RTS              1374
DO_SUBI             131A
END_LTE_BEG         117B
END_NOW             1236
ERROR_END_LTE_BEG   10C2
ERROR_INV_INP       10B2
INVALID             1416
INVALID_INPUT       115E
IXXX_BRA            1304
JSR_MASK            FC0
LEA_MASK            1C0
LF                  A
LONG_MASK           80
MAIN_LOOP           10D2
NEW_LINE            1152
OIIO_BRA            1300
OIIX_BRA            12C6
OIOO_BRA            12D2
OIOX_BRA            12BA
OIXX_BRA            1284
OOIX_BRA            129C
OOOO_BRA            12A0
OOOX_BRA            1290
OOXX_BRA            1274
OP_DECODE           1244
OXXX_BRA            1268
PRINT_COME_BACK_MSG  13CE
PRINT_INVALID_MSG   13AA
PRINT_IT            1104
PRINT_IT_LOOP       1110
PRINT_IT_STRING     1203
PRINT_LOOP          10DE
PRINT_NOPS_TEST     10E6
PRINT_OIOO_ERROR    13BC
SHIFTS              10A6
START               1000
S_ADDI              1404
S_ADDQ              13FF
S_CLR               140E
S_JSR               13FB
S_LEA               1412
S_MOVE              13F6
S_NOP               13EE
S_RTS               13F2
S_SUBI              1409
WORD_MASK           40
WRITE               13E0
WRITE_LOOP          13E2
