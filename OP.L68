00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 5/26/2018 5:06:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Opcode module
00000000                             3  * Written by : Clayton Snyder of Toucans
00000000                             4  * Date       : Created 5/16/2018
00000000                             5  * Description: One half of disassembly logic for a Motorola 68k disassembler.
00000000                             6  *              Reads the word at address A6 and identifies the opcode. Writes
00000000                             7  *              a string representing the opcode to the memory pointed to by A1
00000000                             8  *              then calls the EA decoding module. 
00000000                             9  *-----------------------------------------------------------
00000000                            10  
00000000                            11  ;; ~*~*~*~*~*~*~*~BEGIN OPCODE MODULE~*~*~*~*~*~*~*~
00000000                            12  
00000000                            13  OP_DECODE
00000000  3A1E                      14      MOVE.W  (A6)+,D5     * Load the next opcode to decode into D5, incrementing
00000002                            15      * NOTE: A6 now points at either the next opcode or imm. data for EA part
00000002                            16      
00000002                            17      * is it NOP?
00000002  BA7C 4E71                 18      CMP.W   #CODE_NOP,D5
00000006  6700 0224                 19      BEQ     DO_NOP      * After execution of this branch, will return to I/O
0000000A                            20      
0000000A                            21      * is it RTS?
0000000A  BA7C 4E75                 22      CMP.W   #CODE_RTS,D5
0000000E  6700 022E                 23      BEQ     DO_RTS      * After execution of this branch, will return to I/O
00000012                            24      
00000012                            25      ** Not NOP or RTS, check bit-by-bit to narrow down
00000012                            26      
00000012  0805 000F                 27      BTST.L  #15,D5       * Test the most significant bit of the command
00000016  6700 000C                 28      BEQ     OXXX_BRA     * Branch to opcodes starting with zero     
0000001A  6000 00FA                 29      BRA     IXXX_BRA     * Branch to opcodes starting with a one  ******** COME BAK
0000001E                            30     
0000001E  6000 020C                 31      BRA     DO_NOP
00000022  4E75                      32      RTS * Return to I/O module (temporary; will go to EA module eventually)
00000024                            33      
00000024                            34  * ----------------------BEGIN NARROWING THE LEFT BRANCH OF THE OPCODE SELECTIONS ----------
00000024                            35  OXXX_BRA
00000024  0805 000E                 36      BTST.L  #14,D5      * Test the second bit 
00000028  6700 0006                 37      BEQ     OOXX_BRA    * Branch to opcodes starting with 00
0000002C  6000 0012                 38      BRA     OIXX_BRA    * Branch to opcodes starting with 01   *** COME BAK
00000030                            39  
00000030                            40  OOXX_BRA
00000030  0805 000D                 41      BTST.L  #13,D5          * Test the second bit 
00000034  6700 0016                 42      BEQ     OOOX_BRA        * Branch to opcodes starting with 000
00000038  6000 001E                 43      BRA     OOIX_BRA        * Might be MOVE, MOVEA
0000003C  6000 0248                 44      BRA     PRINT_INVALID_MSG
00000040                            45  OIXX_BRA
00000040  0805 000D                 46      BTST.L  #13,D5
00000044  6700 008A                 47      BEQ     OIOX_BRA            * CLR, JSR, MOVEM, LEA, ADDQ, SUBQ
00000048  6000 0092                 48      BRA     OIIX_BRA            * BCC, OR MOVEQ
0000004C                            49  OOOX_BRA
0000004C  0805 000C                 50      BTST.L  #12,D5              * Test the second bit 
00000050  6700 0012                 51      BEQ     OOOO_BRA            * Decision for SUBI or ADDI
00000054  6000 0028                 52      BRA     OOOI_BRA            * MOVE and MOVEA (B)
00000058                            53  OOIX_BRA
00000058  0805 000C                 54      BTST.L  #12,D5              * Test the second bit 
0000005C  6700 0032                 55      BEQ     OOIO_BRA            * MOVE or MOVEA need to be handled here (W)
00000060  6000 004E                 56      BRA     OOII_BRA            * MOVE or MOVEA need to be handled here (L)
00000064                            57  
00000064                            58  OOOO_BRA                        * tests for ADDI or SUBI
00000064  343C 0F00                 59      MOVE.W  #ADDSUBI_MASK,D2   * Load mask for ADDI temporarily into register for AND operation
00000068  C445                      60      AND.W   D5,D2               * AND with current opcode data and store into D2
0000006A  B47C 0600                 61      CMP.W   #$0600,D2           * Result of mask should be 0060 if the code is ADDi
0000006E  6700 012C                 62      BEQ     DO_ADDI     
00000072  B47C 0400                 63      CMP.W   #$0400,D2           * SUBI and ADDI  have the same bitmask.
00000076  6700 016C                 64      BEQ     DO_SUBI
0000007A  6000 020A                 65      BRA     PRINT_INVALID_MSG
0000007E                            66  OOOI_BRA                        * MOVE and MOVEA need to be handled here (B)
0000007E  343C 3000                 67      MOVE.W  #MOVE_MASK,D2
00000082  C445                      68      AND.W   D5,D2
00000084  B47C 1000                 69      CMP.W   #$1000,D2           * is it a move byte?
00000088  6700 0090                 70      BEQ     DO_MOVE_B           
0000008C                            71  
0000008C  6000 01F8                 72      BRA     PRINT_INVALID_MSG   *neither MoveA or Move? BADDDD
00000090                            73  OOIO_BRA                        * MOVE and MOVEA need to be handled here (W)
00000090  343C 31C0                 74      MOVE.W  #MOVEA_MASK,D2
00000094  C445                      75      AND.W   D5,D2
00000096  B47C 2040                 76      CMP.W   #$2040,D2           * is it a moveA word?
0000009A  6700 0096                 77      BEQ     DO_MOVEA_W          
0000009E                            78  
0000009E  343C 3000                 79      MOVE.W  #MOVE_MASK,D2
000000A2  C445                      80      AND.W   D5,D2
000000A4  B47C 2000                 81      CMP.W   #$2000,D2           * is it a move word?
000000A8  6700 009A                 82      BEQ     DO_MOVE_W           
000000AC                            83  
000000AC  6000 01D8                 84      BRA     PRINT_INVALID_MSG
000000B0                            85  OOII_BRA                        * MOVE and MOVEA need to be handled here (L)
000000B0  343C 31C0                 86      MOVE.W  #MOVEA_MASK,D2
000000B4  C445                      87      AND.W   D5,D2
000000B6  B47C 3040                 88      CMP.W   #$3040,D2           * is it a moveA long?
000000BA  6700 009A                 89      BEQ     DO_MOVEA_L          
000000BE                            90  
000000BE  343C 3000                 91      MOVE.W  #MOVE_MASK,D2
000000C2  C445                      92      AND.W   D5,D2
000000C4  B47C 3000                 93      CMP.W   #$3000,D2           * is it a move long?
000000C8  6700 009E                 94      BEQ     DO_MOVE_L           
000000CC                            95  
000000CC  6000 01B8                 96      BRA     PRINT_INVALID_MSG
000000D0                            97  OIOX_BRA
000000D0  0805 000C                 98      BTST.L  #12,D5
000000D4  6700 0012                 99      BEQ     OIOO_BRA    * CLR, JSR, MOVEM, LEA   
000000D8  6000 011C                100      BRA     DO_ADDQ     * ADDQ 
000000DC                           101  OIIX_BRA
000000DC                           102      *check for MOVEQ and BCC here, which is 0110 always. there is no 0111
000000DC  0805 000C                103      BTST.L  #12,D5
000000E0  6700 00F0                104      BEQ     DO_Bcc            * BCC happens here, have to narrow it down to which one!
000000E4  6000 017C                105      BRA     DO_MOVEQ   
000000E8                           106  OIOO_BRA
000000E8                           107      ** Test for JSR
000000E8  343C 0FC0                108      MOVE.W  #JSR_MASK,D2 * Load mask temporarily into register for ANDing
000000EC  C445                     109      AND.W   D5,D2        * AND with the current opcode data
000000EE  B47C 0E80                110      CMP.W   #$0E80,D2    * Result of mask should be 0E80 if code is JSR
000000F2  6700 0180                111      BEQ     DO_JSR       *
000000F6                           112  
000000F6  343C 0F00                113      MOVE.W  #CLR_MASK,D2
000000FA  C445                     114      AND.W   D5,D2
000000FC  B47C 0200                115      CMP.W   #$0200,D2              * IS IT CLR?
00000100  6700 0106                116      BEQ     DO_CLR
00000104                           117  
00000104  343C 01C0                118      MOVE.W  #LEA_MASK,D2
00000108  C445                     119      AND     D5,D2
0000010A  B47C 01C0                120      CMP.W   #$01C0,D2              *EQUAL TO LEA?
0000010E  6700 010A                121      BEQ.W   DO_LEA
00000112  6000 0184                122      BRA     PRINT_OIOO_ERROR       * if not RTS, not JSR, CLR, or LEA, then its invalid. 
00000116                           123  
00000116                           124  *------------------------------- END OF LEFT TREE - STARTING RIGHT TREE ----------------
00000116                           125  IXXX_BRA
00000116  6000 0192                126      BRA     PRINT_COME_BACK_MSG   * temporary until further development of right branch
0000011A                           127      
0000011A                           128  *------------------------------- END OF RIGHT TREE - STARTING SUBROUTINES ----------------
0000011A                           129  DO_MOVE_B
0000011A  47F9 00000396            130      LEA     S_MOVE_B,A3
00000120  1E3C 002A                131      MOVE.B  #$2A,D7         * for now, temporarily calling this mnemonic number 2, section a (which is a byte)
00000124  4EB9 000002BC            132      JSR     WRITE
0000012A                           133      ** Eventually, EA Module will be called here
Line 134 ERROR: Undefined symbol
0000012A  4EB9 004DBD16            134      JSR     MOVE_EA
00000130  4E75                     135      RTS
00000132                           136  DO_MOVEA_W
00000132  47F9 000003A6            137      LEA     S_MOVEA_W,A3
00000138  1E3C 003B                138      MOVE.B  #$3B,D7         * for now, temporarily calling this mnemonic number 3, section b (which is a word)
0000013C                           139      ** Eventually, EA Module will be called here
0000013C  4EB9 000002BC            140      JSR     WRITE
00000142  4E75                     141      RTS
00000144                           142  DO_MOVE_W
00000144  47F9 000003B6            143      LEA     S_MOVE_W,A3
0000014A  1E3C 002B                144      MOVE.B  #$2B,D7         * for now, temporarily calling this mnemonic number 2, section b (which is a word)
0000014E                           145      ** Eventually, EA Module will be called here
0000014E  4EB9 000002BC            146      JSR     WRITE
00000154  4E75                     147      RTS
00000156                           148  DO_MOVEA_L
00000156  47F9 000003C6            149      LEA     S_MOVEA_L,A3
0000015C  1E3C 003C                150      MOVE.B  #$3C,D7         * for now, temporarily calling this mnemonic number 3, section c (which is a long)
00000160                           151      ** Eventually, EA Module will be called here
00000160  4EB9 000002BC            152      JSR     WRITE
00000166  4E75                     153      RTS
00000168                           154  DO_MOVE_L
00000168  47F9 000003D6            155      LEA     S_MOVE_L,A3
0000016E  1E3C 002C                156      MOVE.B  #$2C,D7         * for now, temporarily calling this mnemonic number 2, section c (which is a long)
00000172                           157      ** Eventually, EA Module will be called here
00000172  4EB9 000002BC            158      JSR     WRITE
00000178  4E75                     159      RTS
0000017A                           160  
0000017A                           161  DO_BCC_CASE
0000017A  343C 0F00                162      MOVE.W  #Bcc_MASK,D2
0000017E  C445                     163      AND     D5,D2
00000180  B47C 0E00                164      CMP.W   #$0E00,D2                * Is it BGT?
00000184  6700 0028                165      BEQ.W   DO_BGT
00000188                           166      
00000188  B47C 0F00                167      CMP.W   #$0F00,D2                * Is it BLE?
0000018C  6700 0032                168      BEQ.W   DO_BLE
00000190                           169  
00000190  B47C 0400                170      CMP.W   #$0400,D2                * Is it BCC?
00000194  6700 003C                171      BEQ.W   DO_BCC
00000198                           172  
00000198  6000 00EC                173      BRA     PRINT_INVALID_MSG        * none of these options? not required or invalid
0000019C                           174  
0000019C                           175  DO_ADDI
0000019C  47F9 00000316            176      LEA     S_ADDI,A3
000001A2  1E3C 0008                177      MOVE.B  #8,D7
000001A6                           178      ** Eventually, EA Module will be called here
000001A6  4EB9 000002BC            179      JSR     WRITE
000001AC  4E75                     180      RTS
000001AE                           181  DO_BGT
000001AE  47F9 00000366            182      LEA     S_BGT,A3
000001B4  1E3C 001A                183      MOVE.B  #26,D7
000001B8                           184      ** Eventually, EA Module will be called here
000001B8  4EB9 000002BC            185      JSR     WRITE
000001BE  4E75                     186      RTS
000001C0                           187  DO_BLE
000001C0  47F9 00000376            188      LEA     S_BLE,A3
000001C6  1E3C 001B                189      MOVE.B  #27,D7
000001CA                           190      ** Eventually, EA Module will be called here
000001CA  4EB9 000002BC            191      JSR     WRITE
000001D0  4E75                     192      RTS
000001D2                           193  DO_BCC
000001D2  47F9 00000386            194      LEA     S_BCC,A3
000001D8  1E3C 001C                195      MOVE.B  #28,D7
000001DC                           196      ** Eventually, EA Module will be called here
000001DC  4EB9 000002BC            197      JSR     WRITE
000001E2  4E75                     198      RTS
000001E4                           199  DO_SUBI
000001E4  47F9 00000326            200      LEA     S_SUBI,A3
000001EA  1E3C 000B                201      MOVE.B  #11,D7
000001EE                           202      ** Eventually, EA Module will be called here
000001EE  4EB9 000002BC            203      JSR     WRITE
000001F4  4E75                     204      RTS
000001F6                           205  DO_ADDQ
000001F6                           206      *Check for full opcode for 11 and onwards. if invalid, print the message
000001F6  47F9 00000306            207      LEA     S_ADDQ,A3
000001FC  1E3C 0009                208      MOVE.B  #9,D7
00000200                           209      ** Eventually, EA Module will be called here
00000200  4EB9 000002BC            210      JSR     WRITE
00000206  4E75                     211      RTS
00000208                           212  DO_CLR
00000208  47F9 00000336            213      LEA     S_CLR,A3
0000020E  1E3C 0010                214      MOVE.B  #16,D7
00000212                           215      ** Eventually, EA Module will be called here
00000212  4EB9 000002BC            216      JSR     WRITE
00000218  4E75                     217      RTS
0000021A                           218  DO_LEA
0000021A  47F9 00000346            219      LEA     S_LEA,A3    * Load the NOP string into A3 for WRITE subroutine
00000220  1E3C 000F                220      MOVE.B  #15,D7       * Store key for op code for EA module
00000224                           221      ** Eventually, EA Module will be called here
00000224  4EB9 000002BC            222      JSR     WRITE       * Jump to WRITE subroutine
0000022A  4E75                     223      RTS                 * Return to I/O module 
0000022C                           224  DO_NOP
0000022C  47F9 000002C6            225      LEA     S_NOP,A3    * Load the NOP string into A3 for WRITE subroutine
00000232  1E3C 0001                226      MOVE.B  #1,D7       * Store key for op code for EA module
00000236                           227      ** Eventually, EA Module will be called here
00000236  4EB9 000002BC            228      JSR     WRITE       * Jump to WRITE subroutine
0000023C  4E75                     229      RTS                 * Return to I/O module 
0000023E                           230  DO_RTS
0000023E  47F9 000002D6            231      LEA     S_RTS,A3    * Load the RTS string into A3 for WRITE subroutine
00000244  1E3C 001E                232      MOVE.B  #30,D7      * Store key for op code for EA module
00000248                           233      ** Eventually, EA Module will be called here
00000248  4EB9 000002BC            234      JSR     WRITE       * Jump to WRITE subroutine
0000024E  4E75                     235      RTS                 * Return to the I/O module bra op_decode  
00000250                           236  DO_MOVE
00000250  47F9 000002E6            237      LEA     S_MOVE,A3
00000256  1E3C 0002                238      MOVE.B  #2,D7
0000025A                           239      ** Eventually, EA Module will be called here
0000025A  4EB9 000002BC            240      JSR     WRITE
00000260  4E75                     241      RTS
00000262                           242  DO_MOVEQ
00000262  47F9 00000356            243      LEA     S_MOVEQ,A3
00000268  1E3C 0004                244      MOVE.B  #4,D7
0000026C  4EB9 000002BC            245      JSR     WRITE
00000272  4E75                     246      RTS
00000274                           247  DO_JSR
00000274  47F9 000002F6            248      LEA     S_JSR,A3
0000027A  1E3C 001B                249      MOVE.B  #27,D7
0000027E                           250      ** Eventually, NOCK will be called here
0000027E  4EB9 000002BC            251      JSR     WRITE
00000284  4E75                     252      RTS
00000286                           253  PRINT_INVALID_MSG
00000286  47F9 000003E6            254      LEA     INVALID,A3
0000028C  1E3C 0000                255      MOVE.B  #0,D7
00000290                           256      ** Eventually, NOCK will be called here
00000290  4EB9 000002BC            257      JSR     WRITE
00000296  4E75                     258      RTS
00000298                           259  PRINT_OIOO_ERROR
00000298  47F9 00000435            260      LEA     BAD_OIOO,A3
0000029E  1E3C 0000                261      MOVE.B  #0,D7
000002A2                           262      ** Eventually, NOCK will be called here
000002A2  4EB9 000002BC            263      JSR     WRITE
000002A8  4E75                     264      RTS
000002AA                           265  PRINT_COME_BACK_MSG
000002AA  47F9 00000412            266      LEA     COMEBK,A3
000002B0  1E3C 0000                267      MOVE.B  #0,D7
000002B4                           268      ** Eventually, NOCK will be called here
000002B4  4EB9 000002BC            269      JSR     WRITE
000002BA  4E75                     270      RTS
000002BC                           271  *** A3 -> String to write (load before calling)
000002BC                           272  *** A4 -> Location in memory to write to 
000002BC                           273  WRITE   * Writes string pointed to by A3 to memory pointed to by A1
000002BC                           274      *MOVEA.L A4,A1     * Save the position of A4 before writing (for I/0)
000002BC                           275  WRITE_LOOP
000002BC  18DB                     276      MOVE.B  (A3)+,(A4)+     * Write one byte and increment
000002BE  0C13 0000                277      CMP.B   #0,(A3)         * Are we at the null terminator?
000002C2  66F8                     278      BNE     WRITE_LOOP      * If not, keep going
000002C4                           279      *MOVE.B  #$2C,(A4)+     * Write the null terminator before exiting
000002C4  4E75                     280      RTS                     * Executes once null terminator was reached
000002C6                           281      
000002C6                           282  ;; ~~~~~~~~STRING CONSTANTS~~~~~~~~
000002C6                           283  
000002C6                           284  *** ML constants for op-codes without EA modes (NOP, RTS)
000002C6  =00004E71                285  CODE_NOP    EQU     $4E71
000002C6  =00004E75                286  CODE_RTS    EQU     $4E75
000002C6                           287  
000002C6                           288  *** Variable used to store the previous value of A1 before writing
000002C6  =00002000                289  A4_PREV     SET     $2000
000002C6                           290  
000002C6                           291  *** Strings for opcodes (write these to memory)
000002C6= 4E 4F 50 20 20 20 ...    292  S_NOP       DC.B    'NOP            ',0
000002D6= 52 54 53 20 20 20 ...    293  S_RTS       DC.B    'RTS            ',0
000002E6= 4D 4F 56 45 20 20 ...    294  S_MOVE      DC.B    'MOVE           ',0
000002F6= 4A 53 52 20 20 20 ...    295  S_JSR       DC.B    'JSR            ',0
00000306= 41 44 44 51 20 20 ...    296  S_ADDQ      DC.B    'ADDQ           ',0
00000316= 41 44 44 49 20 20 ...    297  S_ADDI      DC.B    'ADDI           ',0
00000326= 53 55 42 49 20 20 ...    298  S_SUBI      DC.B    'SUBI           ',0
00000336= 43 4C 52 20 20 20 ...    299  S_CLR       DC.B    'CLR            ',0
00000346= 4C 45 41 20 20 20 ...    300  S_LEA       DC.B    'LEA            ',0
00000356= 4D 4F 56 45 51 20 ...    301  S_MOVEQ     DC.B    'MOVEQ          ',0
00000366= 42 47 54 20 20 20 ...    302  S_BGT       DC.B    'BGT            ',0
00000376= 42 4C 45 20 20 20 ...    303  S_BLE       DC.B    'BLE            ',0
00000386= 42 43 43 20 20 20 ...    304  S_BCC       DC.B    'BCC            ',0
00000396= 4D 4F 56 45 2E 42 ...    305  S_MOVE_B    DC.B    'MOVE.B         ',0
000003A6= 4D 4F 56 45 41 2E ...    306  S_MOVEA_W   DC.B    'MOVEA.W        ',0
000003B6= 4D 4F 56 45 2E 57 ...    307  S_MOVE_W    DC.B    'MOVE.W         ',0
000003C6= 4D 4F 56 45 41 2E ...    308  S_MOVEA_L   DC.B    'MOVEA.L        ',0
000003D6= 4D 4F 56 45 2E 4C ...    309  S_MOVE_L    DC.B    'MOVE.L         ',0
000003E6                           310  
000003E6                           311  
000003E6                           312  *** Strings for messages 
000003E6= 49 4E 56 41 4C 49 ...    313  INVALID     DC.B    'INVALID OPCODE. LETS FIX THIS MESSAGE LATER',0
00000412= 43 6F 6D 65 20 62 ...    314  COMEBK      DC.B    'Come back to me pls dont forget me',0 
00000435= 42 61 64 20 4F 49 ...    315  BAD_OIOO    DC.B    'Bad OIOO maybe not JSR,RTS,CLR,LEA.. who knows.',0
00000465                           316  
00000465                           317  *** Mask constants 
00000465  =00000FC0                318  JSR_MASK        EQU     %0000111111000000
00000465  =00000F00                319  ADDSUBI_MASK    EQU     %0000111100000000       ** come back and fix this to be the same but diferent comparisons 
00000465  =00000000                320  BYTE_MASK       EQU     %0000000000000000       * Not sure if this is needed
00000465  =00000040                321  WORD_MASK       EQU     %0000000001000000       * not sure if this is needed
00000465  =00000080                322  LONG_MASK       EQU     %0000000010000000       * not sure if this is needed
00000465  =00000F00                323  CLR_MASK        EQU     %0000111100000000
00000465  =000001C0                324  LEA_MASK        EQU     %0000000111000000
00000465  =00000F00                325  Bcc_MASK        EQU     %0000111100000000
00000465                           326  
00000465  =000031C0                327  MOVEA_MASK      EQU     %0011000111000000
00000465  =00003000                328  MOVE_MASK       EQU     %0011000000000000
00000465                           329  ;; ~*~*~*~*~*~*~*~END OPCODE MODULE~*~*~*~*~*~*~*~
00000465                           330  
00000465                           331  
Line 332 WARNING: END directive missing, starting address not set

1 error detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A4_PREV             2000
ADDSUBI_MASK        F00
BAD_OIOO            435
BCC_MASK            F00
BYTE_MASK           0
CLR_MASK            F00
CODE_NOP            4E71
CODE_RTS            4E75
COMEBK              412
DO_ADDI             19C
DO_ADDQ             1F6
DO_BCC              1D2
DO_BCC_CASE         17A
DO_BGT              1AE
DO_BLE              1C0
DO_CLR              208
DO_JSR              274
DO_LEA              21A
DO_MOVE             250
DO_MOVEA_L          156
DO_MOVEA_W          132
DO_MOVEQ            262
DO_MOVE_B           11A
DO_MOVE_L           168
DO_MOVE_W           144
DO_NOP              22C
DO_RTS              23E
DO_SUBI             1E4
INVALID             3E6
IXXX_BRA            116
JSR_MASK            FC0
LEA_MASK            1C0
LONG_MASK           80
MOVEA_MASK          31C0
MOVE_MASK           3000
OIIX_BRA            DC
OIOO_BRA            E8
OIOX_BRA            D0
OIXX_BRA            40
OOII_BRA            B0
OOIO_BRA            90
OOIX_BRA            58
OOOI_BRA            7E
OOOO_BRA            64
OOOX_BRA            4C
OOXX_BRA            30
OP_DECODE           0
OXXX_BRA            24
PRINT_COME_BACK_MSG  2AA
PRINT_INVALID_MSG   286
PRINT_OIOO_ERROR    298
S_ADDI              316
S_ADDQ              306
S_BCC               386
S_BGT               366
S_BLE               376
S_CLR               336
S_JSR               2F6
S_LEA               346
S_MOVE              2E6
S_MOVEA_L           3C6
S_MOVEA_W           3A6
S_MOVEQ             356
S_MOVE_B            396
S_MOVE_L            3D6
S_MOVE_W            3B6
S_NOP               2C6
S_RTS               2D6
S_SUBI              326
WORD_MASK           40
WRITE               2BC
WRITE_LOOP          2BC
